package top.shmly.condition.ocp.refactor;

/**
 * @auther: Jibny Zhan
 * @date: 2020/7/31 23:10
 * @description: Open Closed Principle 开放关闭原则：一个软件实体，如类、模块、函数，应该对扩展开放对修改关闭
 * <p>变化应该对修改关闭，对扩展开放，避免在项目中因为新增需求而修改原有稳定代码，而引入新的bug</p>
 * <p>业务变更尽量减少对原有代码的修改，以及对高层模块的修改，这边可以结合依赖倒置原则，
 * 高低层模块之间对抽象或接口进行依赖，有业务变更时，对扩展开放，对修改关闭，开闭原则能够提高代码的复用</p>
 * <p>如何使用开闭原则呢？
 * 抽象约束[(通过接口或抽象类约束扩散,对扩展进行边界限定，不允许出现在接口或抽象类中不存在的public方法)
 * (参数类型，引用对象尽量使用接口或抽象类。而不是实现类，实现里氏替换原则的前提)(抽象层尽量保持稳定，一旦确定就不要修改)]
 * 元数据控制模块行为(元数据指配置参数。数据库数据，例IOC)
 * 制定项目章程(约定大于修改，约定优于配置)
 * 封装变化(将相同的变化封装到一个接口或抽象类中，将不同的变化封装到不同的接口或抽象类中)</p>
 * @Created By IntelliJ IDEA 2020.1.3
 */
public interface IBook {
    // 书籍有名字
    String getName();

    // 书籍有价格
    int getPrice();

    // 书籍有作者
    String getAuthor();
}
